import React from 'react';
import ReactDOM from 'react-dom';
import Address from './components/AddressShow'
import AddressShow from './components/Address'
import addresses from './components/address-list';
import { configure, shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
configure({ adapter: new Adapter() });

describe('AddressShow Shallow Suite', function() {

    const debug = false;

    const addressTest = {
        firstName: 'Patty',
        lastName: 'Murray',
        address: '154 Russell Senate Office Building',
        city: 'Washington',
        state: 'D.C.',
        zip: '20510',
        phone: '(202) 224-2621',
        fax: '(202) 224-0238',
        tollfree: '(866) 481-9186'
    };


    /*
     * Display debug information about a DOM node of a component by index
     * @param {object} wrapper - The HTML generated by your component
     * @param {number} index - Index of HTML element you want to see.
     * @param {boolean} talkToMe - Speak even if quiet is true
     */
    const getIndex = (wrapper, index, talkToMe) => {
        if (debug || talkToMe) {
            const ninep = wrapper.find('div#addressShow').childAt(index).debug();
            console.log('NINEP:', ninep);
        }
    };

    const defaultFieldTest = (name, index, talkToMe) => {
        const wrapper = shallow(<AddressShow address={AddressList[0]}/>);
        const welcome = <p className="App-intro">{name}</p>;
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.contains(welcome)).toEqual(true);
    };

    const afterClickFieldTest = (name, index, talkToMe) => {
        const wrapper = shallow(<AddressShow address={AddressList[1]}/>);
        const welcome = <p className="App-intro">{name}</p>;
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.contains(welcome)).toEqual(true);
    };

    it('renders and displays the first name', () => {
        defaultFieldTest('First Name: unknown', 0);
        afterClickFieldTest('First Name: ' + addressTest.firstName, 0);
    });
    
        it('renders and displays the last name', () => {
        defaultFieldTest('Last Name: unknown', 0);
        afterClickFieldTest('Last Name: ' + addressTest.lastName, 0);
    });
    
        it('renders and displays the address', () => {
        defaultFieldTest('Address: unknown', 0);
        afterClickFieldTest('Address: ' + addressTest.address, 0);
    });
    
        it('renders and displays the city', () => {
        defaultFieldTest('City: unknown', 0);
        afterClickFieldTest('City: ' + addressTest.city, 0);
    });

        it('renders and displays the state', () => {
        defaultFieldTest('State: unknown', 0);
        afterClickFieldTest('State: ' + addressTest.state, 0);
    });

        it('renders and displays the zip', () => {
        defaultFieldTest('Zip: unknown', 0);
        afterClickFieldTest('zip: ' + addressTest.zip, 0);
    });
    
        it('renders and displays the phone', () => {
        defaultFieldTest('Phone: unknown', 0);
        afterClickFieldTest('Phone: ' + addressTest.phone, 0);
    });

        it('renders and displays the fax', () => {
        defaultFieldTest('Fax: unknown', 0);
        afterClickFieldTest('Fax: ' + addressTest.fax, 0);
    });

        it('renders and displays the tollfree', () => {
        defaultFieldTest('Tollfree: unknown', 0);
        afterClickFieldTest('Tollfree: ' + addressTest.tollfree, 0);
    });
});

describe('Address tests', function() {

    it('renders without crashing', () => {
        const div = document.createElement('div');
        ReactDOM.render(<Address/>, div);
        ReactDOM.unmountComponentAtNode(div);
    });

    it('renders and displays the default first name', () => {
        const wrapper = shallow(<Address/>);
        //console.log(wrapper.find('AddressShow').prop('address'));
        expect(wrapper.find('AddressShow').prop('address').firstName).toEqual('unknown');
    });

    it('renders state of firstName after button click', () => {
        const wrapper = shallow(<Address addressList={AddressList}/>);
        wrapper.instance().setAddress();
        setImmediate(() => {
            wrapper.update();
            expect(wrapper.find('AddressShow').prop('address').firstName).toEqual('Patty');
        });
    
    });
    
});